
task wrapper(type: Wrapper) {
    gradleVersion = '2.4'
}

buildscript {
  repositories {
    mavenCentral()
  }
  dependencies {
    classpath 'org.ajoberstar:gradle-git:1.2.0'
  }
}

apply plugin: 'java'
apply plugin: 'maven'
apply plugin: 'application'
apply plugin: 'idea'

def snapNumber = System.getenv("SNAP_PIPELINE_COUNTER") ?: "0"
def buildNumber = System.getenv("TRAVIS_BUILD_NUMBER") ?: snapNumber

def antBuild = new groovy.util.AntBuilder()
version = '1.1.'+buildNumber

repositories {
    mavenCentral()
}

configurations {
	compileOnly
	testRuntime.extendsFrom(compileOnly)
}

dependencies {
    compile 'org.slf4j:slf4j-api:1.7.5',
            'ch.qos.logback:logback-classic:1.0.10',
            'com.amazonaws:aws-java-sdk:1.11.66',
            'commons-io:commons-io:2.5',
            'commons-cli:commons-cli:1.3.1',
            'commons-net:commons-net:3.3',
            'org.apache.ant:ant:1.9.6'

    testCompile 'junit:junit:4.11',
            'org.easymock:easymock:3.2'
}

mainClassName = 'tw.com.commandline.Main'

sourceSets {
	main { java { srcDirs 'src' } }
	test { java { srcDirs 'test' } }
}

sourceSets.all {
    compileClasspath += configurations.compileOnly
}

task unit(type: Test) {
    environment 'testEnvVar', 'testValue'
    filter {
        includeTestsMatching "tw.com.unit.*"
    }
}

task integration(type: Test) {
    filter {
        includeTestsMatching "tw.com.integration.*"
    }
}

task acceptance(type: Test) {
    filter {
        includeTestsMatching "tw.com.acceptance.*"
    }
}

jar {
    manifest {
        attributes(
                "Manifest-Version": "1."+buildNumber,
                "Class-Path": configurations.compileOnly.collect { it.getName() }.join(' '),
                "Main-Class": mainClassName
        )
    }
    baseName = project.name + '-all'
    from({ configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }) {
        exclude "META-INF/*.SF"
        exclude "META-INF/*.DSA"
        exclude "META-INF/*.RSA"
    }
}

distributions {
    main {
        baseName = project.name
        contents {
            from { 'README.md' }
            from { 'testAntTasks.xml"' }
            into('conf') {
                from 'conf'
            } into('licenses') {
                from 'lib'
                include '**/*LICENSE.txt'
                includeEmptyDirs = false
            }
        }
    }
}

task cfnassist << {
    antBuild.taskdef(name: 'cfnassist', classname: 'tw.com.ant.CfnAssistAntTask') {
        classpath {
            fileset(dir: jar.destinationDir, includes: jar.archiveName)
        }
    }
}

task upload(dependsOn: ['distZip','installDist','cfnassist'])  << {
    antBuild.cfnassist(region: 'eu-west-1', buildNumber: buildNumber, bucketname:'cfnassist-release') {
		Artifact(name: 'package', value: distZip.archivePath)
		S3Create()
	}
}
upload.mustRunAfter installDist

task release(dependsOn: ['upload', 'tagRelease'])

import org.ajoberstar.grgit.*
ext.repo = Grgit.open(project.file('.'))

task tagRelease << {
  repo.tag.add {
    name = 'cfnassist-'+version
    message = "Release of cfnassist ${version}"
  }
  repo.push(tags: true) 
}

idea {
  module {
        scopes.TEST.plus += [ configurations.compileOnly ]
        scopes.PROVIDED.plus += [ configurations.compileOnly ]
  }
}

